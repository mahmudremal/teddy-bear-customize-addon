{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/wavesurfer.js/dist/base-plugin.js","webpack:///./node_modules/wavesurfer.js/dist/decoder.js","webpack:///./node_modules/wavesurfer.js/dist/dom.js","webpack:///./node_modules/wavesurfer.js/dist/draggable.js","webpack:///./node_modules/wavesurfer.js/dist/event-emitter.js","webpack:///./node_modules/wavesurfer.js/dist/fetcher.js","webpack:///./node_modules/wavesurfer.js/dist/player.js","webpack:///./node_modules/wavesurfer.js/dist/plugins/record.esm.js","webpack:///./node_modules/wavesurfer.js/dist/renderer.js","webpack:///./node_modules/wavesurfer.js/dist/timer.js","webpack:///./node_modules/wavesurfer.js/dist/wavesurfer.js","webpack:///./node_modules/wavesurfer.js/dist/webaudio.js","webpack:///./src/js/recorder.js"],"names":["window","WaveSurfer","RecordPlugin"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA8C;AAC9C;AACO,yBAAyB,yDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,yEAAU,EAAC;;;;;;;;;;;;;ACxB1B;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,sEAAO,EAAC;;;;;;;;;;;;;ACzDvB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,gDAAgD;AAChD;AACA;AACA;AACe,4EAAa,EAAC;;;;;;;;;;;;;AChC7B;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,iBAAiB;AAC9E,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB;AAChF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,2EAAY,EAAC;;;;;;;;;;;;;ACzC5B;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,IAAI,IAAI,gBAAgB,IAAI,oBAAoB;AAC/F;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACe,sEAAO,EAAC;;;;;;;;;;;;;ACxDvB;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AAC8C;AAC9C,qBAAqB,yDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,qEAAM,EAAC;;;;;;;;;;;;;ACrJtB;AAAA;AAAA,oBAAoB,0CAA0C,cAAc,IAAI,aAAa,SAAS,MAAM,cAAc,IAAI,cAAc,SAAS,MAAM,cAAc,MAAM,iEAAiE,KAAK,cAAc,+BAA+B,GAAG,oDAAoD,QAAQ,cAAc,kBAAkB,UAAU,kGAAkG,aAAa,2BAA2B,sBAAsB,uBAAuB,QAAQ,MAAM,sDAAsD,UAAU,oBAAoB,QAAQ,EAAE,QAAQ,kBAAkB,aAAa,4DAA4D,kBAAkB,eAAe,6CAA6C,UAAU,SAAS,gCAAgC,UAAU,2DAA2D,kBAAkB,cAAc,4CAA4C,QAAQ,sCAAsC,4BAA4B,kBAAkB,GAAG,qBAAqB,OAAO,mBAAmB,UAAU,oBAAoB,wEAAwE,kBAAkB,eAAe,gBAAgB,oCAAoC,KAAK,0aAA0a,uNAAuN,6CAA6C,2GAA2G,IAAI,iBAAiB,kBAAkB,EAAE,mBAAmB,MAAM,6EAA6E,6DAA6D,kDAAkD,QAAQ,qGAAqG,wIAAwI,0BAA0B,YAAY,2BAA2B,+DAA+D,0JAA0J,oBAAoB,6CAA6C,qCAAqC,+BAA+B,yCAAyC,qBAAqB,wNAAwN,oCAAoC,QAAQ,YAAY,IAAI,KAAK,uBAAuB,WAAW,+BAA+B,mDAAmD,2CAA2C,yBAAyB,uBAAuB,oBAAoB,gGAAgG,4HAA4H,oKAAoK,qEAAqE,GAAG,cAAc,6DAA6D,KAAK,MAAM,OAAO,eAAe,4DAA4D,YAAY,2DAA2D,YAAY,yCAAyC,MAAM,IAAI,6CAA6C,qCAAqC,qBAAqB,EAAE,SAAS,8DAA8D,MAAM,oBAAoB,yBAAyB,0HAA0H,GAAG,UAAU,uGAAuG,kBAAkB,yCAAyC,8CAA8C,qBAAqB,iDAAiD,iIAAiI,EAAE,0CAA0C,WAAW,sBAAsB,yEAAyE,YAAY,MAAM,oBAAoB,gBAAgB,EAAE,+JAA+J,yPAAyP,GAAG,cAAc,qBAAqB,cAAc,MAAM,+EAA+E,WAAW,MAAM,4EAA4E,WAAW,MAAM,8EAA8E,gBAAgB,MAAM,yFAAyF,iBAAiB,QAAQ,iNAAiN,kBAAkB,MAAM,qLAAqL,kCAAkC,yCAAyC,iGAAiG,GAAG,UAAU,wFAAwF,+BAA+B,uHAA4I;;;;;;;;;;;;;ACA19N;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;AAC+C;AACD;AAC9C,uBAAuB,yDAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAa;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA,cAAc,sBAAsB,SAAS,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAgE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM;AACtC,iCAAiC,OAAO;AACxC,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA,kDAAkD,OAAO;AACzD;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,YAAY;AAChF;AACA;AACA;AACA,mDAAmD,uDAAuD;AAC1G,yCAAyC,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAuC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,SAAS,0BAA0B,SAAS;AACnG,8CAA8C,SAAS;AACvD,oCAAoC,SAAS;AAC7C,qDAAqD,4DAA4D;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACe,uEAAQ,EAAC;;;;;;;;;;;;;AClpBxB;AAAA;AAA8C;AAC9C,oBAAoB,yDAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,oEAAK,EAAC;;;;;;;;;;;;;ACrBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AAC0C;AACP;AACH;AACG;AACF;AACI;AACN;AACY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oDAAc;AAChE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,yBAAyB,iDAAK;AAC9B;AACA,4BAA4B,oDAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACriBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH,aAAa;AACtI;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC,oDAAc;AACnD;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAO;AAC1C;AACA;AACA;AACA,yCAAyC,mDAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oDAAoD,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAU;AAClC,iBAAiB,oCAAG;AACL,yEAAU,EAAC;;;;;;;;;;;;;AC5Z1B;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AAC8C;AAC9C;AACA;AACA;AACA,6BAA6B,yDAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM,IAAI,gBAAgB,IAAI,oBAAoB;AACrG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACe,6EAAc,EAAC;;;;;;;;;;;;;AC7M9B;AAAA;AAAA;AAAuC;AAC6B;AACpEA,MAAM,CAACC,UAAU,GAAGA,qDAAU;AAC9BD,MAAM,CAACE,YAAY,GAAGA,gFAAY,C","file":"js/recorder.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/recorder.js\");\n","import EventEmitter from './event-emitter.js';\n/** Base class for wavesurfer plugins */\nexport class BasePlugin extends EventEmitter {\n    /** Create a plugin instance */\n    constructor(options) {\n        super();\n        this.subscriptions = [];\n        this.options = options;\n    }\n    /** Called after this.wavesurfer is available */\n    onInit() {\n        return;\n    }\n    /** Do not call directly, only called by WavesSurfer internally */\n    _init(wavesurfer) {\n        this.wavesurfer = wavesurfer;\n        this.onInit();\n    }\n    /** Destroy the plugin and unsubscribe from all events */\n    destroy() {\n        this.emit('destroy');\n        this.subscriptions.forEach((unsubscribe) => unsubscribe());\n    }\n}\nexport default BasePlugin;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** Decode an array buffer into an audio buffer */\nfunction decode(audioData, sampleRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const audioCtx = new AudioContext({ sampleRate });\n        const decode = audioCtx.decodeAudioData(audioData);\n        return decode.finally(() => audioCtx.close());\n    });\n}\n/** Normalize peaks to -1..1 */\nfunction normalize(channelData) {\n    const firstChannel = channelData[0];\n    if (firstChannel.some((n) => n > 1 || n < -1)) {\n        const length = firstChannel.length;\n        let max = 0;\n        for (let i = 0; i < length; i++) {\n            const absN = Math.abs(firstChannel[i]);\n            if (absN > max)\n                max = absN;\n        }\n        for (const channel of channelData) {\n            for (let i = 0; i < length; i++) {\n                channel[i] /= max;\n            }\n        }\n    }\n    return channelData;\n}\n/** Create an audio buffer from pre-decoded audio data */\nfunction createBuffer(channelData, duration) {\n    // If a single array of numbers is passed, make it an array of arrays\n    if (typeof channelData[0] === 'number')\n        channelData = [channelData];\n    // Normalize to -1..1\n    normalize(channelData);\n    return {\n        duration,\n        length: channelData[0].length,\n        sampleRate: channelData[0].length / duration,\n        numberOfChannels: channelData.length,\n        getChannelData: (i) => channelData === null || channelData === void 0 ? void 0 : channelData[i],\n        copyFromChannel: AudioBuffer.prototype.copyFromChannel,\n        copyToChannel: AudioBuffer.prototype.copyToChannel,\n    };\n}\nconst Decoder = {\n    decode,\n    createBuffer,\n};\nexport default Decoder;\n","function renderNode(tagName, content) {\n    const element = content.xmlns\n        ? document.createElementNS(content.xmlns, tagName)\n        : document.createElement(tagName);\n    for (const [key, value] of Object.entries(content)) {\n        if (key === 'children') {\n            for (const [key, value] of Object.entries(content)) {\n                if (typeof value === 'string') {\n                    element.appendChild(document.createTextNode(value));\n                }\n                else {\n                    element.appendChild(renderNode(key, value));\n                }\n            }\n        }\n        else if (key === 'style') {\n            Object.assign(element.style, value);\n        }\n        else if (key === 'textContent') {\n            element.textContent = value;\n        }\n        else {\n            element.setAttribute(key, value.toString());\n        }\n    }\n    return element;\n}\nexport function createElement(tagName, content, container) {\n    const el = renderNode(tagName, content || {});\n    container === null || container === void 0 ? void 0 : container.appendChild(el);\n    return el;\n}\nexport default createElement;\n","export function makeDraggable(element, onDrag, onStart, onEnd, threshold = 3, mouseButton = 0, touchDelay = 100) {\n    if (!element)\n        return () => void 0;\n    const isTouchDevice = matchMedia('(pointer: coarse)').matches;\n    let unsubscribeDocument = () => void 0;\n    const onPointerDown = (event) => {\n        if (event.button !== mouseButton)\n            return;\n        event.preventDefault();\n        event.stopPropagation();\n        let startX = event.clientX;\n        let startY = event.clientY;\n        let isDragging = false;\n        const touchStartTime = Date.now();\n        const onPointerMove = (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            if (isTouchDevice && Date.now() - touchStartTime < touchDelay)\n                return;\n            const x = event.clientX;\n            const y = event.clientY;\n            const dx = x - startX;\n            const dy = y - startY;\n            if (isDragging || Math.abs(dx) > threshold || Math.abs(dy) > threshold) {\n                const rect = element.getBoundingClientRect();\n                const { left, top } = rect;\n                if (!isDragging) {\n                    onStart === null || onStart === void 0 ? void 0 : onStart(startX - left, startY - top);\n                    isDragging = true;\n                }\n                onDrag(dx, dy, x - left, y - top);\n                startX = x;\n                startY = y;\n            }\n        };\n        const onPointerUp = (event) => {\n            if (isDragging) {\n                const x = event.clientX;\n                const y = event.clientY;\n                const rect = element.getBoundingClientRect();\n                const { left, top } = rect;\n                onEnd === null || onEnd === void 0 ? void 0 : onEnd(x - left, y - top);\n            }\n            unsubscribeDocument();\n        };\n        const onPointerLeave = (e) => {\n            // Listen to events only on the document and not on inner elements\n            if (!e.relatedTarget || e.relatedTarget === document.documentElement) {\n                onPointerUp(e);\n            }\n        };\n        const onClick = (event) => {\n            if (isDragging) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        const onTouchMove = (event) => {\n            if (isDragging) {\n                event.preventDefault();\n            }\n        };\n        document.addEventListener('pointermove', onPointerMove);\n        document.addEventListener('pointerup', onPointerUp);\n        document.addEventListener('pointerout', onPointerLeave);\n        document.addEventListener('pointercancel', onPointerLeave);\n        document.addEventListener('touchmove', onTouchMove, { passive: false });\n        document.addEventListener('click', onClick, { capture: true });\n        unsubscribeDocument = () => {\n            document.removeEventListener('pointermove', onPointerMove);\n            document.removeEventListener('pointerup', onPointerUp);\n            document.removeEventListener('pointerout', onPointerLeave);\n            document.removeEventListener('pointercancel', onPointerLeave);\n            document.removeEventListener('touchmove', onTouchMove);\n            setTimeout(() => {\n                document.removeEventListener('click', onClick, { capture: true });\n            }, 10);\n        };\n    };\n    element.addEventListener('pointerdown', onPointerDown);\n    return () => {\n        unsubscribeDocument();\n        element.removeEventListener('pointerdown', onPointerDown);\n    };\n}\n","/** A simple event emitter that can be used to listen to and emit events. */\nclass EventEmitter {\n    constructor() {\n        this.listeners = {};\n    }\n    /** Subscribe to an event. Returns an unsubscribe function. */\n    on(event, listener, options) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = new Set();\n        }\n        this.listeners[event].add(listener);\n        if (options === null || options === void 0 ? void 0 : options.once) {\n            const unsubscribeOnce = () => {\n                this.un(event, unsubscribeOnce);\n                this.un(event, listener);\n            };\n            this.on(event, unsubscribeOnce);\n            return unsubscribeOnce;\n        }\n        return () => this.un(event, listener);\n    }\n    /** Unsubscribe from an event */\n    un(event, listener) {\n        var _a;\n        (_a = this.listeners[event]) === null || _a === void 0 ? void 0 : _a.delete(listener);\n    }\n    /** Subscribe to an event only once */\n    once(event, listener) {\n        return this.on(event, listener, { once: true });\n    }\n    /** Clear all events */\n    unAll() {\n        this.listeners = {};\n    }\n    /** Emit an event */\n    emit(eventName, ...args) {\n        if (this.listeners[eventName]) {\n            this.listeners[eventName].forEach((listener) => listener(...args));\n        }\n    }\n}\nexport default EventEmitter;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction watchProgress(response, progressCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!response.body || !response.headers)\n            return;\n        const reader = response.body.getReader();\n        const contentLength = Number(response.headers.get('Content-Length')) || 0;\n        let receivedLength = 0;\n        // Process the data\n        const processChunk = (value) => __awaiter(this, void 0, void 0, function* () {\n            // Add to the received length\n            receivedLength += (value === null || value === void 0 ? void 0 : value.length) || 0;\n            const percentage = Math.round((receivedLength / contentLength) * 100);\n            progressCallback(percentage);\n        });\n        const read = () => __awaiter(this, void 0, void 0, function* () {\n            let data;\n            try {\n                data = yield reader.read();\n            }\n            catch (_a) {\n                // Ignore errors because we can only handle the main response\n                return;\n            }\n            // Continue reading data until done\n            if (!data.done) {\n                processChunk(data.value);\n                yield read();\n            }\n        });\n        read();\n    });\n}\nfunction fetchBlob(url, progressCallback, requestInit) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Fetch the resource\n        const response = yield fetch(url, requestInit);\n        if (response.status >= 400) {\n            throw new Error(`Failed to fetch ${url}: ${response.status} (${response.statusText})`);\n        }\n        // Read the data to track progress\n        watchProgress(response.clone(), progressCallback);\n        return response.blob();\n    });\n}\nconst Fetcher = {\n    fetchBlob,\n};\nexport default Fetcher;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport EventEmitter from './event-emitter.js';\nclass Player extends EventEmitter {\n    constructor(options) {\n        super();\n        this.isExternalMedia = false;\n        if (options.media) {\n            this.media = options.media;\n            this.isExternalMedia = true;\n        }\n        else {\n            this.media = document.createElement('audio');\n        }\n        // Controls\n        if (options.mediaControls) {\n            this.media.controls = true;\n        }\n        // Autoplay\n        if (options.autoplay) {\n            this.media.autoplay = true;\n        }\n        // Speed\n        if (options.playbackRate != null) {\n            this.onMediaEvent('canplay', () => {\n                if (options.playbackRate != null) {\n                    this.media.playbackRate = options.playbackRate;\n                }\n            }, { once: true });\n        }\n    }\n    onMediaEvent(event, callback, options) {\n        this.media.addEventListener(event, callback, options);\n        return () => this.media.removeEventListener(event, callback, options);\n    }\n    getSrc() {\n        return this.media.currentSrc || this.media.src || '';\n    }\n    revokeSrc() {\n        const src = this.getSrc();\n        if (src.startsWith('blob:')) {\n            URL.revokeObjectURL(src);\n        }\n    }\n    canPlayType(type) {\n        return this.media.canPlayType(type) !== '';\n    }\n    setSrc(url, blob) {\n        const src = this.getSrc();\n        if (url && src === url)\n            return;\n        this.revokeSrc();\n        const newSrc = blob instanceof Blob && (this.canPlayType(blob.type) || !url) ? URL.createObjectURL(blob) : url;\n        try {\n            this.media.src = newSrc;\n        }\n        catch (e) {\n            this.media.src = url;\n        }\n    }\n    destroy() {\n        this.media.pause();\n        if (this.isExternalMedia)\n            return;\n        this.media.remove();\n        this.revokeSrc();\n        this.media.src = '';\n        // Load resets the media element to its initial state\n        this.media.load();\n    }\n    setMediaElement(element) {\n        this.media = element;\n    }\n    /** Start playing the audio */\n    play() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.media.play();\n        });\n    }\n    /** Pause the audio */\n    pause() {\n        this.media.pause();\n    }\n    /** Check if the audio is playing */\n    isPlaying() {\n        return !this.media.paused && !this.media.ended;\n    }\n    /** Jump to a specific time in the audio (in seconds) */\n    setTime(time) {\n        this.media.currentTime = time;\n    }\n    /** Get the duration of the audio in seconds */\n    getDuration() {\n        return this.media.duration;\n    }\n    /** Get the current audio position in seconds */\n    getCurrentTime() {\n        return this.media.currentTime;\n    }\n    /** Get the audio volume */\n    getVolume() {\n        return this.media.volume;\n    }\n    /** Set the audio volume */\n    setVolume(volume) {\n        this.media.volume = volume;\n    }\n    /** Get the audio muted state */\n    getMuted() {\n        return this.media.muted;\n    }\n    /** Mute or unmute the audio */\n    setMuted(muted) {\n        this.media.muted = muted;\n    }\n    /** Get the playback speed */\n    getPlaybackRate() {\n        return this.media.playbackRate;\n    }\n    /** Check if the audio is seeking */\n    isSeeking() {\n        return this.media.seeking;\n    }\n    /** Set the playback speed, pass an optional false to NOT preserve the pitch */\n    setPlaybackRate(rate, preservePitch) {\n        // preservePitch is true by default in most browsers\n        if (preservePitch != null) {\n            this.media.preservesPitch = preservePitch;\n        }\n        this.media.playbackRate = rate;\n    }\n    /** Get the HTML media element */\n    getMediaElement() {\n        return this.media;\n    }\n    /** Set a sink id to change the audio output device */\n    setSinkId(sinkId) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId\n        const media = this.media;\n        return media.setSinkId(sinkId);\n    }\n}\nexport default Player;\n","function t(t,i,e,s){return new(e||(e=Promise))((function(o,r){function n(t){try{d(s.next(t))}catch(t){r(t)}}function a(t){try{d(s.throw(t))}catch(t){r(t)}}function d(t){var i;t.done?o(t.value):(i=t.value,i instanceof e?i:new e((function(t){t(i)}))).then(n,a)}d((s=s.apply(t,i||[])).next())}))}\"function\"==typeof SuppressedError&&SuppressedError;class i{constructor(){this.listeners={}}on(t,i,e){if(this.listeners[t]||(this.listeners[t]=new Set),this.listeners[t].add(i),null==e?void 0:e.once){const e=()=>{this.un(t,e),this.un(t,i)};return this.on(t,e),e}return()=>this.un(t,i)}un(t,i){var e;null===(e=this.listeners[t])||void 0===e||e.delete(i)}once(t,i){return this.on(t,i,{once:!0})}unAll(){this.listeners={}}emit(t,...i){this.listeners[t]&&this.listeners[t].forEach((t=>t(...i)))}}class e extends i{constructor(t){super(),this.subscriptions=[],this.options=t}onInit(){}_init(t){this.wavesurfer=t,this.onInit()}destroy(){this.emit(\"destroy\"),this.subscriptions.forEach((t=>t()))}}class s extends i{constructor(){super(...arguments),this.unsubscribe=()=>{}}start(){this.unsubscribe=this.on(\"tick\",(()=>{requestAnimationFrame((()=>{this.emit(\"tick\")}))})),this.emit(\"tick\")}stop(){this.unsubscribe()}destroy(){this.unsubscribe()}}const o=[\"audio/webm\",\"audio/wav\",\"audio/mpeg\",\"audio/mp4\",\"audio/mp3\"];class r extends e{constructor(t){var i,e,o,r,n,a;super(Object.assign(Object.assign({},t),{audioBitsPerSecond:null!==(i=t.audioBitsPerSecond)&&void 0!==i?i:128e3,scrollingWaveform:null!==(e=t.scrollingWaveform)&&void 0!==e&&e,scrollingWaveformWindow:null!==(o=t.scrollingWaveformWindow)&&void 0!==o?o:5,continuousWaveform:null!==(r=t.continuousWaveform)&&void 0!==r&&r,renderRecordedAudio:null===(n=t.renderRecordedAudio)||void 0===n||n,mediaRecorderTimeslice:null!==(a=t.mediaRecorderTimeslice)&&void 0!==a?a:void 0})),this.stream=null,this.mediaRecorder=null,this.dataWindow=null,this.isWaveformPaused=!1,this.lastStartTime=0,this.lastDuration=0,this.duration=0,this.timer=new s,this.subscriptions.push(this.timer.on(\"tick\",(()=>{const t=performance.now()-this.lastStartTime;this.duration=this.isPaused()?this.duration:this.lastDuration+t,this.emit(\"record-progress\",this.duration)})))}static create(t){return new r(t||{})}renderMicStream(t){var i;const e=new AudioContext,s=e.createMediaStreamSource(t),o=e.createAnalyser();s.connect(o),this.options.continuousWaveform&&(o.fftSize=32);const r=o.frequencyBinCount,n=new Float32Array(r);let a=0;this.wavesurfer&&(null!==(i=this.originalOptions)&&void 0!==i||(this.originalOptions=Object.assign({},this.wavesurfer.options)),this.wavesurfer.options.interact=!1,this.options.scrollingWaveform&&(this.wavesurfer.options.cursorWidth=0));const d=setInterval((()=>{var t,i,s,d;if(!this.isWaveformPaused){if(o.getFloatTimeDomainData(n),this.options.scrollingWaveform){const t=Math.floor((this.options.scrollingWaveformWindow||0)*e.sampleRate),i=Math.min(t,this.dataWindow?this.dataWindow.length+r:r),s=new Float32Array(t);if(this.dataWindow){const e=Math.max(0,t-this.dataWindow.length);s.set(this.dataWindow.slice(-i+r),e)}s.set(n,t-r),this.dataWindow=s}else if(this.options.continuousWaveform){if(!this.dataWindow){const e=this.options.continuousWaveformDuration?Math.round(100*this.options.continuousWaveformDuration):(null!==(i=null===(t=this.wavesurfer)||void 0===t?void 0:t.getWidth())&&void 0!==i?i:0)*window.devicePixelRatio;this.dataWindow=new Float32Array(e)}let e=0;for(let t=0;t<r;t++){const i=Math.abs(n[t]);i>e&&(e=i)}if(a+1>this.dataWindow.length){const t=new Float32Array(2*this.dataWindow.length);t.set(this.dataWindow,0),this.dataWindow=t}this.dataWindow[a]=e,a++}else this.dataWindow=n;if(this.wavesurfer){const t=(null!==(d=null===(s=this.dataWindow)||void 0===s?void 0:s.length)&&void 0!==d?d:0)/100;this.wavesurfer.load(\"\",[this.dataWindow],this.options.scrollingWaveform?this.options.scrollingWaveformWindow:t).then((()=>{this.wavesurfer&&this.options.continuousWaveform&&(this.wavesurfer.setTime(this.getDuration()/1e3),this.wavesurfer.options.minPxPerSec||this.wavesurfer.setOptions({minPxPerSec:this.wavesurfer.getWidth()/this.wavesurfer.getDuration()}))})).catch((t=>{console.error(\"Error rendering real-time recording data:\",t)}))}}}),10);return{onDestroy:()=>{clearInterval(d),null==s||s.disconnect(),null==e||e.close()},onEnd:()=>{this.isWaveformPaused=!0,clearInterval(d),this.stopMic()}}}startMic(i){return t(this,void 0,void 0,(function*(){let t;try{t=yield navigator.mediaDevices.getUserMedia({audio:!(null==i?void 0:i.deviceId)||{deviceId:i.deviceId}})}catch(t){throw new Error(\"Error accessing the microphone: \"+t.message)}const{onDestroy:e,onEnd:s}=this.renderMicStream(t);return this.subscriptions.push(this.once(\"destroy\",e)),this.subscriptions.push(this.once(\"record-end\",s)),this.stream=t,t}))}stopMic(){this.stream&&(this.stream.getTracks().forEach((t=>t.stop())),this.stream=null,this.mediaRecorder=null)}startRecording(i){return t(this,void 0,void 0,(function*(){const t=this.stream||(yield this.startMic(i));this.dataWindow=null;const e=this.mediaRecorder||new MediaRecorder(t,{mimeType:this.options.mimeType||o.find((t=>MediaRecorder.isTypeSupported(t))),audioBitsPerSecond:this.options.audioBitsPerSecond});this.mediaRecorder=e,this.stopRecording();const s=[];e.ondataavailable=t=>{t.data.size>0&&s.push(t.data),this.emit(\"record-data-available\",t.data)};const r=t=>{var i;const o=new Blob(s,{type:e.mimeType});this.emit(t,o),this.options.renderRecordedAudio&&(this.applyOriginalOptionsIfNeeded(),null===(i=this.wavesurfer)||void 0===i||i.load(URL.createObjectURL(o)))};e.onpause=()=>r(\"record-pause\"),e.onstop=()=>r(\"record-end\"),e.start(this.options.mediaRecorderTimeslice),this.lastStartTime=performance.now(),this.lastDuration=0,this.duration=0,this.isWaveformPaused=!1,this.timer.start(),this.emit(\"record-start\")}))}getDuration(){return this.duration}isRecording(){var t;return\"recording\"===(null===(t=this.mediaRecorder)||void 0===t?void 0:t.state)}isPaused(){var t;return\"paused\"===(null===(t=this.mediaRecorder)||void 0===t?void 0:t.state)}isActive(){var t;return\"inactive\"!==(null===(t=this.mediaRecorder)||void 0===t?void 0:t.state)}stopRecording(){var t;this.isActive()&&(null===(t=this.mediaRecorder)||void 0===t||t.stop(),this.timer.stop())}pauseRecording(){var t,i;this.isRecording()&&(this.isWaveformPaused=!0,null===(t=this.mediaRecorder)||void 0===t||t.requestData(),null===(i=this.mediaRecorder)||void 0===i||i.pause(),this.timer.stop(),this.lastDuration=this.duration)}resumeRecording(){var t;this.isPaused()&&(this.isWaveformPaused=!1,null===(t=this.mediaRecorder)||void 0===t||t.resume(),this.timer.start(),this.lastStartTime=performance.now(),this.emit(\"record-resume\"))}static getAvailableAudioDevices(){return t(this,void 0,void 0,(function*(){return navigator.mediaDevices.enumerateDevices().then((t=>t.filter((t=>\"audioinput\"===t.kind))))}))}destroy(){this.applyOriginalOptionsIfNeeded(),super.destroy(),this.stopRecording(),this.stopMic()}applyOriginalOptionsIfNeeded(){this.wavesurfer&&this.originalOptions&&(this.wavesurfer.setOptions(this.originalOptions),delete this.originalOptions)}}export{r as default};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { makeDraggable } from './draggable.js';\nimport EventEmitter from './event-emitter.js';\nclass Renderer extends EventEmitter {\n    constructor(options, audioElement) {\n        super();\n        this.timeouts = [];\n        this.isScrollable = false;\n        this.audioData = null;\n        this.resizeObserver = null;\n        this.lastContainerWidth = 0;\n        this.isDragging = false;\n        this.subscriptions = [];\n        this.subscriptions = [];\n        this.options = options;\n        const parent = this.parentFromOptionsContainer(options.container);\n        this.parent = parent;\n        const [div, shadow] = this.initHtml();\n        parent.appendChild(div);\n        this.container = div;\n        this.scrollContainer = shadow.querySelector('.scroll');\n        this.wrapper = shadow.querySelector('.wrapper');\n        this.canvasWrapper = shadow.querySelector('.canvases');\n        this.progressWrapper = shadow.querySelector('.progress');\n        this.cursor = shadow.querySelector('.cursor');\n        if (audioElement) {\n            shadow.appendChild(audioElement);\n        }\n        this.initEvents();\n    }\n    parentFromOptionsContainer(container) {\n        let parent;\n        if (typeof container === 'string') {\n            parent = document.querySelector(container);\n        }\n        else if (container instanceof HTMLElement) {\n            parent = container;\n        }\n        if (!parent) {\n            throw new Error('Container not found');\n        }\n        return parent;\n    }\n    initEvents() {\n        const getClickPosition = (e) => {\n            const rect = this.wrapper.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            const relativeX = x / rect.width;\n            const relativeY = y / rect.height;\n            return [relativeX, relativeY];\n        };\n        // Add a click listener\n        this.wrapper.addEventListener('click', (e) => {\n            const [x, y] = getClickPosition(e);\n            this.emit('click', x, y);\n        });\n        // Add a double click listener\n        this.wrapper.addEventListener('dblclick', (e) => {\n            const [x, y] = getClickPosition(e);\n            this.emit('dblclick', x, y);\n        });\n        // Drag\n        if (this.options.dragToSeek === true || typeof this.options.dragToSeek === 'object') {\n            this.initDrag();\n        }\n        // Add a scroll listener\n        this.scrollContainer.addEventListener('scroll', () => {\n            const { scrollLeft, scrollWidth, clientWidth } = this.scrollContainer;\n            const startX = scrollLeft / scrollWidth;\n            const endX = (scrollLeft + clientWidth) / scrollWidth;\n            this.emit('scroll', startX, endX, scrollLeft, scrollLeft + clientWidth);\n        });\n        // Re-render the waveform on container resize\n        if (typeof ResizeObserver === 'function') {\n            const delay = this.createDelay(100);\n            this.resizeObserver = new ResizeObserver(() => {\n                delay()\n                    .then(() => this.onContainerResize())\n                    .catch(() => undefined);\n            });\n            this.resizeObserver.observe(this.scrollContainer);\n        }\n    }\n    onContainerResize() {\n        const width = this.parent.clientWidth;\n        if (width === this.lastContainerWidth && this.options.height !== 'auto')\n            return;\n        this.lastContainerWidth = width;\n        this.reRender();\n    }\n    initDrag() {\n        this.subscriptions.push(makeDraggable(this.wrapper, \n        // On drag\n        (_, __, x) => {\n            this.emit('drag', Math.max(0, Math.min(1, x / this.wrapper.getBoundingClientRect().width)));\n        }, \n        // On start drag\n        (x) => {\n            this.isDragging = true;\n            this.emit('dragstart', Math.max(0, Math.min(1, x / this.wrapper.getBoundingClientRect().width)));\n        }, \n        // On end drag\n        (x) => {\n            this.isDragging = false;\n            this.emit('dragend', Math.max(0, Math.min(1, x / this.wrapper.getBoundingClientRect().width)));\n        }));\n    }\n    getHeight(optionsHeight, optionsSplitChannel) {\n        var _a;\n        const defaultHeight = 128;\n        const numberOfChannels = ((_a = this.audioData) === null || _a === void 0 ? void 0 : _a.numberOfChannels) || 1;\n        if (optionsHeight == null)\n            return defaultHeight;\n        if (!isNaN(Number(optionsHeight)))\n            return Number(optionsHeight);\n        if (optionsHeight === 'auto') {\n            const height = this.parent.clientHeight || defaultHeight;\n            if (optionsSplitChannel === null || optionsSplitChannel === void 0 ? void 0 : optionsSplitChannel.every((channel) => !channel.overlay))\n                return height / numberOfChannels;\n            return height;\n        }\n        return defaultHeight;\n    }\n    initHtml() {\n        const div = document.createElement('div');\n        const shadow = div.attachShadow({ mode: 'open' });\n        const cspNonce = this.options.cspNonce && typeof this.options.cspNonce === 'string' ? this.options.cspNonce.replace(/\"/g, '') : '';\n        shadow.innerHTML = `\n      <style${cspNonce ? ` nonce=\"${cspNonce}\"` : ''}>\n        :host {\n          user-select: none;\n          min-width: 1px;\n        }\n        :host audio {\n          display: block;\n          width: 100%;\n        }\n        :host .scroll {\n          overflow-x: auto;\n          overflow-y: hidden;\n          width: 100%;\n          position: relative;\n        }\n        :host .noScrollbar {\n          scrollbar-color: transparent;\n          scrollbar-width: none;\n        }\n        :host .noScrollbar::-webkit-scrollbar {\n          display: none;\n          -webkit-appearance: none;\n        }\n        :host .wrapper {\n          position: relative;\n          overflow: visible;\n          z-index: 2;\n        }\n        :host .canvases {\n          min-height: ${this.getHeight(this.options.height, this.options.splitChannels)}px;\n        }\n        :host .canvases > div {\n          position: relative;\n        }\n        :host canvas {\n          display: block;\n          position: absolute;\n          top: 0;\n          image-rendering: pixelated;\n        }\n        :host .progress {\n          pointer-events: none;\n          position: absolute;\n          z-index: 2;\n          top: 0;\n          left: 0;\n          width: 0;\n          height: 100%;\n          overflow: hidden;\n        }\n        :host .progress > div {\n          position: relative;\n        }\n        :host .cursor {\n          pointer-events: none;\n          position: absolute;\n          z-index: 5;\n          top: 0;\n          left: 0;\n          height: 100%;\n          border-radius: 2px;\n        }\n      </style>\n\n      <div class=\"scroll\" part=\"scroll\">\n        <div class=\"wrapper\" part=\"wrapper\">\n          <div class=\"canvases\" part=\"canvases\"></div>\n          <div class=\"progress\" part=\"progress\"></div>\n          <div class=\"cursor\" part=\"cursor\"></div>\n        </div>\n      </div>\n    `;\n        return [div, shadow];\n    }\n    /** Wavesurfer itself calls this method. Do not call it manually. */\n    setOptions(options) {\n        if (this.options.container !== options.container) {\n            const newParent = this.parentFromOptionsContainer(options.container);\n            newParent.appendChild(this.container);\n            this.parent = newParent;\n        }\n        if (options.dragToSeek === true || typeof this.options.dragToSeek === 'object') {\n            this.initDrag();\n        }\n        this.options = options;\n        // Re-render the waveform\n        this.reRender();\n    }\n    getWrapper() {\n        return this.wrapper;\n    }\n    getWidth() {\n        return this.scrollContainer.clientWidth;\n    }\n    getScroll() {\n        return this.scrollContainer.scrollLeft;\n    }\n    setScroll(pixels) {\n        this.scrollContainer.scrollLeft = pixels;\n    }\n    setScrollPercentage(percent) {\n        const { scrollWidth } = this.scrollContainer;\n        const scrollStart = scrollWidth * percent;\n        this.setScroll(scrollStart);\n    }\n    destroy() {\n        var _a, _b;\n        this.subscriptions.forEach((unsubscribe) => unsubscribe());\n        this.container.remove();\n        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        (_b = this.unsubscribeOnScroll) === null || _b === void 0 ? void 0 : _b.call(this);\n    }\n    createDelay(delayMs = 10) {\n        let timeout;\n        let reject;\n        const onClear = () => {\n            if (timeout)\n                clearTimeout(timeout);\n            if (reject)\n                reject();\n        };\n        this.timeouts.push(onClear);\n        return () => {\n            return new Promise((resolveFn, rejectFn) => {\n                onClear();\n                reject = rejectFn;\n                timeout = setTimeout(() => {\n                    timeout = undefined;\n                    reject = undefined;\n                    resolveFn();\n                }, delayMs);\n            });\n        };\n    }\n    // Convert array of color values to linear gradient\n    convertColorValues(color) {\n        if (!Array.isArray(color))\n            return color || '';\n        if (color.length < 2)\n            return color[0] || '';\n        const canvasElement = document.createElement('canvas');\n        const ctx = canvasElement.getContext('2d');\n        const gradientHeight = canvasElement.height * (window.devicePixelRatio || 1);\n        const gradient = ctx.createLinearGradient(0, 0, 0, gradientHeight);\n        const colorStopPercentage = 1 / (color.length - 1);\n        color.forEach((color, index) => {\n            const offset = index * colorStopPercentage;\n            gradient.addColorStop(offset, color);\n        });\n        return gradient;\n    }\n    getPixelRatio() {\n        return Math.max(1, window.devicePixelRatio || 1);\n    }\n    renderBarWaveform(channelData, options, ctx, vScale) {\n        const topChannel = channelData[0];\n        const bottomChannel = channelData[1] || channelData[0];\n        const length = topChannel.length;\n        const { width, height } = ctx.canvas;\n        const halfHeight = height / 2;\n        const pixelRatio = this.getPixelRatio();\n        const barWidth = options.barWidth ? options.barWidth * pixelRatio : 1;\n        const barGap = options.barGap ? options.barGap * pixelRatio : options.barWidth ? barWidth / 2 : 0;\n        const barRadius = options.barRadius || 0;\n        const barIndexScale = width / (barWidth + barGap) / length;\n        const rectFn = barRadius && 'roundRect' in ctx ? 'roundRect' : 'rect';\n        ctx.beginPath();\n        let prevX = 0;\n        let maxTop = 0;\n        let maxBottom = 0;\n        for (let i = 0; i <= length; i++) {\n            const x = Math.round(i * barIndexScale);\n            if (x > prevX) {\n                const topBarHeight = Math.round(maxTop * halfHeight * vScale);\n                const bottomBarHeight = Math.round(maxBottom * halfHeight * vScale);\n                const barHeight = topBarHeight + bottomBarHeight || 1;\n                // Vertical alignment\n                let y = halfHeight - topBarHeight;\n                if (options.barAlign === 'top') {\n                    y = 0;\n                }\n                else if (options.barAlign === 'bottom') {\n                    y = height - barHeight;\n                }\n                ctx[rectFn](prevX * (barWidth + barGap), y, barWidth, barHeight, barRadius);\n                prevX = x;\n                maxTop = 0;\n                maxBottom = 0;\n            }\n            const magnitudeTop = Math.abs(topChannel[i] || 0);\n            const magnitudeBottom = Math.abs(bottomChannel[i] || 0);\n            if (magnitudeTop > maxTop)\n                maxTop = magnitudeTop;\n            if (magnitudeBottom > maxBottom)\n                maxBottom = magnitudeBottom;\n        }\n        ctx.fill();\n        ctx.closePath();\n    }\n    renderLineWaveform(channelData, _options, ctx, vScale) {\n        const drawChannel = (index) => {\n            const channel = channelData[index] || channelData[0];\n            const length = channel.length;\n            const { height } = ctx.canvas;\n            const halfHeight = height / 2;\n            const hScale = ctx.canvas.width / length;\n            ctx.moveTo(0, halfHeight);\n            let prevX = 0;\n            let max = 0;\n            for (let i = 0; i <= length; i++) {\n                const x = Math.round(i * hScale);\n                if (x > prevX) {\n                    const h = Math.round(max * halfHeight * vScale) || 1;\n                    const y = halfHeight + h * (index === 0 ? -1 : 1);\n                    ctx.lineTo(prevX, y);\n                    prevX = x;\n                    max = 0;\n                }\n                const value = Math.abs(channel[i] || 0);\n                if (value > max)\n                    max = value;\n            }\n            ctx.lineTo(prevX, halfHeight);\n        };\n        ctx.beginPath();\n        drawChannel(0);\n        drawChannel(1);\n        ctx.fill();\n        ctx.closePath();\n    }\n    renderWaveform(channelData, options, ctx) {\n        ctx.fillStyle = this.convertColorValues(options.waveColor);\n        // Custom rendering function\n        if (options.renderFunction) {\n            options.renderFunction(channelData, ctx);\n            return;\n        }\n        // Vertical scaling\n        let vScale = options.barHeight || 1;\n        if (options.normalize) {\n            const max = Array.from(channelData[0]).reduce((max, value) => Math.max(max, Math.abs(value)), 0);\n            vScale = max ? 1 / max : 1;\n        }\n        // Render waveform as bars\n        if (options.barWidth || options.barGap || options.barAlign) {\n            this.renderBarWaveform(channelData, options, ctx, vScale);\n            return;\n        }\n        // Render waveform as a polyline\n        this.renderLineWaveform(channelData, options, ctx, vScale);\n    }\n    renderSingleCanvas(data, options, width, height, offset, canvasContainer, progressContainer) {\n        const pixelRatio = this.getPixelRatio();\n        const canvas = document.createElement('canvas');\n        canvas.width = Math.round(width * pixelRatio);\n        canvas.height = Math.round(height * pixelRatio);\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n        canvas.style.left = `${Math.round(offset)}px`;\n        canvasContainer.appendChild(canvas);\n        const ctx = canvas.getContext('2d');\n        this.renderWaveform(data, options, ctx);\n        // Draw a progress canvas\n        if (canvas.width > 0 && canvas.height > 0) {\n            const progressCanvas = canvas.cloneNode();\n            const progressCtx = progressCanvas.getContext('2d');\n            progressCtx.drawImage(canvas, 0, 0);\n            // Set the composition method to draw only where the waveform is drawn\n            progressCtx.globalCompositeOperation = 'source-in';\n            progressCtx.fillStyle = this.convertColorValues(options.progressColor);\n            // This rectangle acts as a mask thanks to the composition method\n            progressCtx.fillRect(0, 0, canvas.width, canvas.height);\n            progressContainer.appendChild(progressCanvas);\n        }\n    }\n    renderMultiCanvas(channelData, options, width, height, canvasContainer, progressContainer) {\n        const pixelRatio = this.getPixelRatio();\n        const { clientWidth } = this.scrollContainer;\n        const totalWidth = width / pixelRatio;\n        let singleCanvasWidth = Math.min(Renderer.MAX_CANVAS_WIDTH, clientWidth, totalWidth);\n        let drawnIndexes = {};\n        // Adjust width to avoid gaps between canvases when using bars\n        if (options.barWidth || options.barGap) {\n            const barWidth = options.barWidth || 0.5;\n            const barGap = options.barGap || barWidth / 2;\n            const totalBarWidth = barWidth + barGap;\n            if (singleCanvasWidth % totalBarWidth !== 0) {\n                singleCanvasWidth = Math.floor(singleCanvasWidth / totalBarWidth) * totalBarWidth;\n            }\n        }\n        // Draw a single canvas\n        const draw = (index) => {\n            if (index < 0 || index >= numCanvases)\n                return;\n            if (drawnIndexes[index])\n                return;\n            drawnIndexes[index] = true;\n            const offset = index * singleCanvasWidth;\n            const clampedWidth = Math.min(totalWidth - offset, singleCanvasWidth);\n            if (clampedWidth <= 0)\n                return;\n            const data = channelData.map((channel) => {\n                const start = Math.floor((offset / totalWidth) * channel.length);\n                const end = Math.floor(((offset + clampedWidth) / totalWidth) * channel.length);\n                return channel.slice(start, end);\n            });\n            this.renderSingleCanvas(data, options, clampedWidth, height, offset, canvasContainer, progressContainer);\n        };\n        // Clear canvases to avoid too many DOM nodes\n        const clearCanvases = () => {\n            if (Object.keys(drawnIndexes).length > Renderer.MAX_NODES) {\n                canvasContainer.innerHTML = '';\n                progressContainer.innerHTML = '';\n                drawnIndexes = {};\n            }\n        };\n        // Calculate how many canvases to render\n        const numCanvases = Math.ceil(totalWidth / singleCanvasWidth);\n        // Render all canvases if the waveform doesn't scroll\n        if (!this.isScrollable) {\n            for (let i = 0; i < numCanvases; i++) {\n                draw(i);\n            }\n            return;\n        }\n        // Lazy rendering\n        const viewPosition = this.scrollContainer.scrollLeft / totalWidth;\n        const startCanvas = Math.floor(viewPosition * numCanvases);\n        // Draw the canvases in the viewport first\n        draw(startCanvas - 1);\n        draw(startCanvas);\n        draw(startCanvas + 1);\n        // Subscribe to the scroll event to draw additional canvases\n        if (numCanvases > 1) {\n            this.unsubscribeOnScroll = this.on('scroll', () => {\n                const { scrollLeft } = this.scrollContainer;\n                const canvasIndex = Math.floor((scrollLeft / totalWidth) * numCanvases);\n                clearCanvases();\n                draw(canvasIndex - 1);\n                draw(canvasIndex);\n                draw(canvasIndex + 1);\n            });\n        }\n    }\n    renderChannel(channelData, _a, width, channelIndex) {\n        var { overlay } = _a, options = __rest(_a, [\"overlay\"]);\n        // A container for canvases\n        const canvasContainer = document.createElement('div');\n        const height = this.getHeight(options.height, options.splitChannels);\n        canvasContainer.style.height = `${height}px`;\n        if (overlay && channelIndex > 0) {\n            canvasContainer.style.marginTop = `-${height}px`;\n        }\n        this.canvasWrapper.style.minHeight = `${height}px`;\n        this.canvasWrapper.appendChild(canvasContainer);\n        // A container for progress canvases\n        const progressContainer = canvasContainer.cloneNode();\n        this.progressWrapper.appendChild(progressContainer);\n        // Render the waveform\n        this.renderMultiCanvas(channelData, options, width, height, canvasContainer, progressContainer);\n    }\n    render(audioData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            // Clear previous timeouts\n            this.timeouts.forEach((clear) => clear());\n            this.timeouts = [];\n            // Clear the canvases\n            this.canvasWrapper.innerHTML = '';\n            this.progressWrapper.innerHTML = '';\n            // Width\n            if (this.options.width != null) {\n                this.scrollContainer.style.width =\n                    typeof this.options.width === 'number' ? `${this.options.width}px` : this.options.width;\n            }\n            // Determine the width of the waveform\n            const pixelRatio = this.getPixelRatio();\n            const parentWidth = this.scrollContainer.clientWidth;\n            const scrollWidth = Math.ceil(audioData.duration * (this.options.minPxPerSec || 0));\n            // Whether the container should scroll\n            this.isScrollable = scrollWidth > parentWidth;\n            const useParentWidth = this.options.fillParent && !this.isScrollable;\n            // Width of the waveform in pixels\n            const width = (useParentWidth ? parentWidth : scrollWidth) * pixelRatio;\n            // Set the width of the wrapper\n            this.wrapper.style.width = useParentWidth ? '100%' : `${scrollWidth}px`;\n            // Set additional styles\n            this.scrollContainer.style.overflowX = this.isScrollable ? 'auto' : 'hidden';\n            this.scrollContainer.classList.toggle('noScrollbar', !!this.options.hideScrollbar);\n            this.cursor.style.backgroundColor = `${this.options.cursorColor || this.options.progressColor}`;\n            this.cursor.style.width = `${this.options.cursorWidth}px`;\n            this.audioData = audioData;\n            this.emit('render');\n            // Render the waveform\n            if (this.options.splitChannels) {\n                // Render a waveform for each channel\n                for (let i = 0; i < audioData.numberOfChannels; i++) {\n                    const options = Object.assign(Object.assign({}, this.options), (_a = this.options.splitChannels) === null || _a === void 0 ? void 0 : _a[i]);\n                    this.renderChannel([audioData.getChannelData(i)], options, width, i);\n                }\n            }\n            else {\n                // Render a single waveform for the first two channels (left and right)\n                const channels = [audioData.getChannelData(0)];\n                if (audioData.numberOfChannels > 1)\n                    channels.push(audioData.getChannelData(1));\n                this.renderChannel(channels, this.options, width, 0);\n            }\n            // Must be emitted asynchronously for backward compatibility\n            Promise.resolve().then(() => this.emit('rendered'));\n        });\n    }\n    reRender() {\n        var _a;\n        (_a = this.unsubscribeOnScroll) === null || _a === void 0 ? void 0 : _a.call(this);\n        delete this.unsubscribeOnScroll;\n        // Return if the waveform has not been rendered yet\n        if (!this.audioData)\n            return;\n        // Remember the current cursor position\n        const { scrollWidth } = this.scrollContainer;\n        const { right: before } = this.progressWrapper.getBoundingClientRect();\n        // Re-render the waveform\n        this.render(this.audioData);\n        // Adjust the scroll position so that the cursor stays in the same place\n        if (this.isScrollable && scrollWidth !== this.scrollContainer.scrollWidth) {\n            const { right: after } = this.progressWrapper.getBoundingClientRect();\n            let delta = after - before;\n            // to limit compounding floating-point drift\n            // we need to round to the half px furthest from 0\n            delta *= 2;\n            delta = delta < 0 ? Math.floor(delta) : Math.ceil(delta);\n            delta /= 2;\n            this.scrollContainer.scrollLeft += delta;\n        }\n    }\n    zoom(minPxPerSec) {\n        this.options.minPxPerSec = minPxPerSec;\n        this.reRender();\n    }\n    scrollIntoView(progress, isPlaying = false) {\n        const { scrollLeft, scrollWidth, clientWidth } = this.scrollContainer;\n        const progressWidth = progress * scrollWidth;\n        const startEdge = scrollLeft;\n        const endEdge = scrollLeft + clientWidth;\n        const middle = clientWidth / 2;\n        if (this.isDragging) {\n            // Scroll when dragging close to the edge of the viewport\n            const minGap = 30;\n            if (progressWidth + minGap > endEdge) {\n                this.scrollContainer.scrollLeft += minGap;\n            }\n            else if (progressWidth - minGap < startEdge) {\n                this.scrollContainer.scrollLeft -= minGap;\n            }\n        }\n        else {\n            if (progressWidth < startEdge || progressWidth > endEdge) {\n                this.scrollContainer.scrollLeft = progressWidth - (this.options.autoCenter ? middle : 0);\n            }\n            // Keep the cursor centered when playing\n            const center = progressWidth - scrollLeft - middle;\n            if (isPlaying && this.options.autoCenter && center > 0) {\n                this.scrollContainer.scrollLeft += Math.min(center, 10);\n            }\n        }\n        // Emit the scroll event\n        {\n            const newScroll = this.scrollContainer.scrollLeft;\n            const startX = newScroll / scrollWidth;\n            const endX = (newScroll + clientWidth) / scrollWidth;\n            this.emit('scroll', startX, endX, newScroll, newScroll + clientWidth);\n        }\n    }\n    renderProgress(progress, isPlaying) {\n        if (isNaN(progress))\n            return;\n        const percents = progress * 100;\n        this.canvasWrapper.style.clipPath = `polygon(${percents}% 0, 100% 0, 100% 100%, ${percents}% 100%)`;\n        this.progressWrapper.style.width = `${percents}%`;\n        this.cursor.style.left = `${percents}%`;\n        this.cursor.style.transform = `translateX(-${Math.round(percents) === 100 ? this.options.cursorWidth : 0}px)`;\n        if (this.isScrollable && this.options.autoScroll) {\n            this.scrollIntoView(progress, isPlaying);\n        }\n    }\n    exportImage(format, quality, type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const canvases = this.canvasWrapper.querySelectorAll('canvas');\n            if (!canvases.length) {\n                throw new Error('No waveform data');\n            }\n            // Data URLs\n            if (type === 'dataURL') {\n                const images = Array.from(canvases).map((canvas) => canvas.toDataURL(format, quality));\n                return Promise.resolve(images);\n            }\n            // Blobs\n            return Promise.all(Array.from(canvases).map((canvas) => {\n                return new Promise((resolve, reject) => {\n                    canvas.toBlob((blob) => {\n                        blob ? resolve(blob) : reject(new Error('Could not export image'));\n                    }, format, quality);\n                });\n            }));\n        });\n    }\n}\nRenderer.MAX_CANVAS_WIDTH = 8000;\nRenderer.MAX_NODES = 10;\nexport default Renderer;\n","import EventEmitter from './event-emitter.js';\nclass Timer extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.unsubscribe = () => undefined;\n    }\n    start() {\n        this.unsubscribe = this.on('tick', () => {\n            requestAnimationFrame(() => {\n                this.emit('tick');\n            });\n        });\n        this.emit('tick');\n    }\n    stop() {\n        this.unsubscribe();\n    }\n    destroy() {\n        this.unsubscribe();\n    }\n}\nexport default Timer;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport BasePlugin from './base-plugin.js';\nimport Decoder from './decoder.js';\nimport * as dom from './dom.js';\nimport Fetcher from './fetcher.js';\nimport Player from './player.js';\nimport Renderer from './renderer.js';\nimport Timer from './timer.js';\nimport WebAudioPlayer from './webaudio.js';\nconst defaultOptions = {\n    waveColor: '#999',\n    progressColor: '#555',\n    cursorWidth: 1,\n    minPxPerSec: 0,\n    fillParent: true,\n    interact: true,\n    dragToSeek: false,\n    autoScroll: true,\n    autoCenter: true,\n    sampleRate: 8000,\n};\nclass WaveSurfer extends Player {\n    /** Create a new WaveSurfer instance */\n    static create(options) {\n        return new WaveSurfer(options);\n    }\n    /** Create a new WaveSurfer instance */\n    constructor(options) {\n        const media = options.media ||\n            (options.backend === 'WebAudio' ? new WebAudioPlayer() : undefined);\n        super({\n            media,\n            mediaControls: options.mediaControls,\n            autoplay: options.autoplay,\n            playbackRate: options.audioRate,\n        });\n        this.plugins = [];\n        this.decodedData = null;\n        this.subscriptions = [];\n        this.mediaSubscriptions = [];\n        this.abortController = null;\n        this.options = Object.assign({}, defaultOptions, options);\n        this.timer = new Timer();\n        const audioElement = media ? undefined : this.getMediaElement();\n        this.renderer = new Renderer(this.options, audioElement);\n        this.initPlayerEvents();\n        this.initRendererEvents();\n        this.initTimerEvents();\n        this.initPlugins();\n        // Read the initial URL before load has been called\n        const initialUrl = this.options.url || this.getSrc() || '';\n        // Init and load async to allow external events to be registered\n        Promise.resolve().then(() => {\n            this.emit('init');\n            // Load audio if URL or an external media with an src is passed,\n            // of render w/o audio if pre-decoded peaks and duration are provided\n            const { peaks, duration } = this.options;\n            if (initialUrl || (peaks && duration)) {\n                // Swallow async errors because they cannot be caught from a constructor call.\n                // Subscribe to the wavesurfer's error event to handle them.\n                this.load(initialUrl, peaks, duration).catch(() => null);\n            }\n        });\n    }\n    updateProgress(currentTime = this.getCurrentTime()) {\n        this.renderer.renderProgress(currentTime / this.getDuration(), this.isPlaying());\n        return currentTime;\n    }\n    initTimerEvents() {\n        // The timer fires every 16ms for a smooth progress animation\n        this.subscriptions.push(this.timer.on('tick', () => {\n            if (!this.isSeeking()) {\n                const currentTime = this.updateProgress();\n                this.emit('timeupdate', currentTime);\n                this.emit('audioprocess', currentTime);\n            }\n        }));\n    }\n    initPlayerEvents() {\n        if (this.isPlaying()) {\n            this.emit('play');\n            this.timer.start();\n        }\n        this.mediaSubscriptions.push(this.onMediaEvent('timeupdate', () => {\n            const currentTime = this.updateProgress();\n            this.emit('timeupdate', currentTime);\n        }), this.onMediaEvent('play', () => {\n            this.emit('play');\n            this.timer.start();\n        }), this.onMediaEvent('pause', () => {\n            this.emit('pause');\n            this.timer.stop();\n        }), this.onMediaEvent('emptied', () => {\n            this.timer.stop();\n        }), this.onMediaEvent('ended', () => {\n            this.emit('finish');\n        }), this.onMediaEvent('seeking', () => {\n            this.emit('seeking', this.getCurrentTime());\n        }), this.onMediaEvent('error', (err) => {\n            this.emit('error', err.error);\n        }));\n    }\n    initRendererEvents() {\n        this.subscriptions.push(\n        // Seek on click\n        this.renderer.on('click', (relativeX, relativeY) => {\n            if (this.options.interact) {\n                this.seekTo(relativeX);\n                this.emit('interaction', relativeX * this.getDuration());\n                this.emit('click', relativeX, relativeY);\n            }\n        }), \n        // Double click\n        this.renderer.on('dblclick', (relativeX, relativeY) => {\n            this.emit('dblclick', relativeX, relativeY);\n        }), \n        // Scroll\n        this.renderer.on('scroll', (startX, endX, scrollLeft, scrollRight) => {\n            const duration = this.getDuration();\n            this.emit('scroll', startX * duration, endX * duration, scrollLeft, scrollRight);\n        }), \n        // Redraw\n        this.renderer.on('render', () => {\n            this.emit('redraw');\n        }), \n        // RedrawComplete\n        this.renderer.on('rendered', () => {\n            this.emit('redrawcomplete');\n        }), \n        // DragStart\n        this.renderer.on('dragstart', (relativeX) => {\n            this.emit('dragstart', relativeX);\n        }), \n        // DragEnd\n        this.renderer.on('dragend', (relativeX) => {\n            this.emit('dragend', relativeX);\n        }));\n        // Drag\n        {\n            let debounce;\n            this.subscriptions.push(this.renderer.on('drag', (relativeX) => {\n                if (!this.options.interact)\n                    return;\n                // Update the visual position\n                this.renderer.renderProgress(relativeX);\n                // Set the audio position with a debounce\n                clearTimeout(debounce);\n                let debounceTime;\n                if (this.isPlaying()) {\n                    debounceTime = 0;\n                }\n                else if (this.options.dragToSeek === true) {\n                    debounceTime = 200;\n                }\n                else if (typeof this.options.dragToSeek === 'object' && this.options.dragToSeek !== undefined) {\n                    debounceTime = this.options.dragToSeek['debounceTime'];\n                }\n                debounce = setTimeout(() => {\n                    this.seekTo(relativeX);\n                }, debounceTime);\n                this.emit('interaction', relativeX * this.getDuration());\n                this.emit('drag', relativeX);\n            }));\n        }\n    }\n    initPlugins() {\n        var _a;\n        if (!((_a = this.options.plugins) === null || _a === void 0 ? void 0 : _a.length))\n            return;\n        this.options.plugins.forEach((plugin) => {\n            this.registerPlugin(plugin);\n        });\n    }\n    unsubscribePlayerEvents() {\n        this.mediaSubscriptions.forEach((unsubscribe) => unsubscribe());\n        this.mediaSubscriptions = [];\n    }\n    /** Set new wavesurfer options and re-render it */\n    setOptions(options) {\n        this.options = Object.assign({}, this.options, options);\n        this.renderer.setOptions(this.options);\n        if (options.audioRate) {\n            this.setPlaybackRate(options.audioRate);\n        }\n        if (options.mediaControls != null) {\n            this.getMediaElement().controls = options.mediaControls;\n        }\n    }\n    /** Register a wavesurfer.js plugin */\n    registerPlugin(plugin) {\n        plugin._init(this);\n        this.plugins.push(plugin);\n        // Unregister plugin on destroy\n        this.subscriptions.push(plugin.once('destroy', () => {\n            this.plugins = this.plugins.filter((p) => p !== plugin);\n        }));\n        return plugin;\n    }\n    /** For plugins only: get the waveform wrapper div */\n    getWrapper() {\n        return this.renderer.getWrapper();\n    }\n    /** For plugins only: get the scroll container client width */\n    getWidth() {\n        return this.renderer.getWidth();\n    }\n    /** Get the current scroll position in pixels */\n    getScroll() {\n        return this.renderer.getScroll();\n    }\n    /** Set the current scroll position in pixels */\n    setScroll(pixels) {\n        return this.renderer.setScroll(pixels);\n    }\n    /** Move the start of the viewing window to a specific time in the audio (in seconds) */\n    setScrollTime(time) {\n        const percentage = time / this.getDuration();\n        this.renderer.setScrollPercentage(percentage);\n    }\n    /** Get all registered plugins */\n    getActivePlugins() {\n        return this.plugins;\n    }\n    loadAudio(url, blob, channelData, duration) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            this.emit('load', url);\n            if (!this.options.media && this.isPlaying())\n                this.pause();\n            this.decodedData = null;\n            // Fetch the entire audio as a blob if pre-decoded data is not provided\n            if (!blob && !channelData) {\n                const fetchParams = this.options.fetchParams || {};\n                if (window.AbortController && !fetchParams.signal) {\n                    this.abortController = new AbortController();\n                    fetchParams.signal = (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.signal;\n                }\n                const onProgress = (percentage) => this.emit('loading', percentage);\n                blob = yield Fetcher.fetchBlob(url, onProgress, fetchParams);\n            }\n            // Set the mediaelement source\n            this.setSrc(url, blob);\n            // Wait for the audio duration\n            const audioDuration = yield new Promise((resolve) => {\n                const staticDuration = duration || this.getDuration();\n                if (staticDuration) {\n                    resolve(staticDuration);\n                }\n                else {\n                    this.mediaSubscriptions.push(this.onMediaEvent('loadedmetadata', () => resolve(this.getDuration()), { once: true }));\n                }\n            });\n            // Set the duration if the player is a WebAudioPlayer without a URL\n            if (!url && !blob) {\n                const media = this.getMediaElement();\n                if (media instanceof WebAudioPlayer) {\n                    media.duration = audioDuration;\n                }\n            }\n            // Decode the audio data or use user-provided peaks\n            if (channelData) {\n                this.decodedData = Decoder.createBuffer(channelData, audioDuration || 0);\n            }\n            else if (blob) {\n                const arrayBuffer = yield blob.arrayBuffer();\n                this.decodedData = yield Decoder.decode(arrayBuffer, this.options.sampleRate);\n            }\n            if (this.decodedData) {\n                this.emit('decode', this.getDuration());\n                this.renderer.render(this.decodedData);\n            }\n            this.emit('ready', this.getDuration());\n        });\n    }\n    /** Load an audio file by URL, with optional pre-decoded audio data */\n    load(url, channelData, duration) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield this.loadAudio(url, undefined, channelData, duration);\n            }\n            catch (err) {\n                this.emit('error', err);\n                throw err;\n            }\n        });\n    }\n    /** Load an audio blob */\n    loadBlob(blob, channelData, duration) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield this.loadAudio('', blob, channelData, duration);\n            }\n            catch (err) {\n                this.emit('error', err);\n                throw err;\n            }\n        });\n    }\n    /** Zoom the waveform by a given pixels-per-second factor */\n    zoom(minPxPerSec) {\n        if (!this.decodedData) {\n            throw new Error('No audio loaded');\n        }\n        this.renderer.zoom(minPxPerSec);\n        this.emit('zoom', minPxPerSec);\n    }\n    /** Get the decoded audio data */\n    getDecodedData() {\n        return this.decodedData;\n    }\n    /** Get decoded peaks */\n    exportPeaks({ channels = 2, maxLength = 8000, precision = 10000 } = {}) {\n        if (!this.decodedData) {\n            throw new Error('The audio has not been decoded yet');\n        }\n        const maxChannels = Math.min(channels, this.decodedData.numberOfChannels);\n        const peaks = [];\n        for (let i = 0; i < maxChannels; i++) {\n            const channel = this.decodedData.getChannelData(i);\n            const data = [];\n            const sampleSize = channel.length / maxLength;\n            for (let i = 0; i < maxLength; i++) {\n                const sample = channel.slice(Math.floor(i * sampleSize), Math.ceil((i + 1) * sampleSize));\n                let max = 0;\n                for (let x = 0; x < sample.length; x++) {\n                    const n = sample[x];\n                    if (Math.abs(n) > Math.abs(max))\n                        max = n;\n                }\n                data.push(Math.round(max * precision) / precision);\n            }\n            peaks.push(data);\n        }\n        return peaks;\n    }\n    /** Get the duration of the audio in seconds */\n    getDuration() {\n        let duration = super.getDuration() || 0;\n        // Fall back to the decoded data duration if the media duration is incorrect\n        if ((duration === 0 || duration === Infinity) && this.decodedData) {\n            duration = this.decodedData.duration;\n        }\n        return duration;\n    }\n    /** Toggle if the waveform should react to clicks */\n    toggleInteraction(isInteractive) {\n        this.options.interact = isInteractive;\n    }\n    /** Jump to a specific time in the audio (in seconds) */\n    setTime(time) {\n        super.setTime(time);\n        this.updateProgress(time);\n        this.emit('timeupdate', time);\n    }\n    /** Seek to a percentage of audio as [0..1] (0 = beginning, 1 = end) */\n    seekTo(progress) {\n        const time = this.getDuration() * progress;\n        this.setTime(time);\n    }\n    /** Play or pause the audio */\n    playPause() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.isPlaying() ? this.pause() : this.play();\n        });\n    }\n    /** Stop the audio and go to the beginning */\n    stop() {\n        this.pause();\n        this.setTime(0);\n    }\n    /** Skip N or -N seconds from the current position */\n    skip(seconds) {\n        this.setTime(this.getCurrentTime() + seconds);\n    }\n    /** Empty the waveform */\n    empty() {\n        this.load('', [[0]], 0.001);\n    }\n    /** Set HTML media element */\n    setMediaElement(element) {\n        this.unsubscribePlayerEvents();\n        super.setMediaElement(element);\n        this.initPlayerEvents();\n    }\n    exportImage() {\n        return __awaiter(this, arguments, void 0, function* (format = 'image/png', quality = 1, type = 'dataURL') {\n            return this.renderer.exportImage(format, quality, type);\n        });\n    }\n    /** Unmount wavesurfer */\n    destroy() {\n        var _a;\n        this.emit('destroy');\n        (_a = this.abortController) === null || _a === void 0 ? void 0 : _a.abort();\n        this.plugins.forEach((plugin) => plugin.destroy());\n        this.subscriptions.forEach((unsubscribe) => unsubscribe());\n        this.unsubscribePlayerEvents();\n        this.timer.destroy();\n        this.renderer.destroy();\n        super.destroy();\n    }\n}\nWaveSurfer.BasePlugin = BasePlugin;\nWaveSurfer.dom = dom;\nexport default WaveSurfer;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport EventEmitter from './event-emitter.js';\n/**\n * A Web Audio buffer player emulating the behavior of an HTML5 Audio element.\n */\nclass WebAudioPlayer extends EventEmitter {\n    constructor(audioContext = new AudioContext()) {\n        super();\n        this.bufferNode = null;\n        this.playStartTime = 0;\n        this.playedDuration = 0;\n        this._muted = false;\n        this._playbackRate = 1;\n        this._duration = undefined;\n        this.buffer = null;\n        this.currentSrc = '';\n        this.paused = true;\n        this.crossOrigin = null;\n        this.seeking = false;\n        this.autoplay = false;\n        /** Subscribe to an event. Returns an unsubscribe function. */\n        this.addEventListener = this.on;\n        /** Unsubscribe from an event */\n        this.removeEventListener = this.un;\n        this.audioContext = audioContext;\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.connect(this.audioContext.destination);\n    }\n    load() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return;\n        });\n    }\n    get src() {\n        return this.currentSrc;\n    }\n    set src(value) {\n        this.currentSrc = value;\n        this._duration = undefined;\n        if (!value) {\n            this.buffer = null;\n            this.emit('emptied');\n            return;\n        }\n        fetch(value)\n            .then((response) => {\n            if (response.status >= 400) {\n                throw new Error(`Failed to fetch ${value}: ${response.status} (${response.statusText})`);\n            }\n            return response.arrayBuffer();\n        })\n            .then((arrayBuffer) => {\n            if (this.currentSrc !== value)\n                return null;\n            return this.audioContext.decodeAudioData(arrayBuffer);\n        })\n            .then((audioBuffer) => {\n            if (this.currentSrc !== value)\n                return;\n            this.buffer = audioBuffer;\n            this.emit('loadedmetadata');\n            this.emit('canplay');\n            if (this.autoplay)\n                this.play();\n        });\n    }\n    _play() {\n        var _a;\n        if (!this.paused)\n            return;\n        this.paused = false;\n        (_a = this.bufferNode) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this.bufferNode = this.audioContext.createBufferSource();\n        if (this.buffer) {\n            this.bufferNode.buffer = this.buffer;\n        }\n        this.bufferNode.playbackRate.value = this._playbackRate;\n        this.bufferNode.connect(this.gainNode);\n        let currentPos = this.playedDuration * this._playbackRate;\n        if (currentPos >= this.duration) {\n            currentPos = 0;\n            this.playedDuration = 0;\n        }\n        this.bufferNode.start(this.audioContext.currentTime, currentPos);\n        this.playStartTime = this.audioContext.currentTime;\n        this.bufferNode.onended = () => {\n            if (this.currentTime >= this.duration) {\n                this.pause();\n                this.emit('ended');\n            }\n        };\n    }\n    _pause() {\n        var _a;\n        this.paused = true;\n        (_a = this.bufferNode) === null || _a === void 0 ? void 0 : _a.stop();\n        this.playedDuration += this.audioContext.currentTime - this.playStartTime;\n    }\n    play() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.paused)\n                return;\n            this._play();\n            this.emit('play');\n        });\n    }\n    pause() {\n        if (this.paused)\n            return;\n        this._pause();\n        this.emit('pause');\n    }\n    stopAt(timeSeconds) {\n        var _a, _b;\n        const delay = timeSeconds - this.currentTime;\n        (_a = this.bufferNode) === null || _a === void 0 ? void 0 : _a.stop(this.audioContext.currentTime + delay);\n        (_b = this.bufferNode) === null || _b === void 0 ? void 0 : _b.addEventListener('ended', () => {\n            this.bufferNode = null;\n            this.pause();\n        }, { once: true });\n    }\n    setSinkId(deviceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ac = this.audioContext;\n            return ac.setSinkId(deviceId);\n        });\n    }\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(value) {\n        this._playbackRate = value;\n        if (this.bufferNode) {\n            this.bufferNode.playbackRate.value = value;\n        }\n    }\n    get currentTime() {\n        const time = this.paused\n            ? this.playedDuration\n            : this.playedDuration + (this.audioContext.currentTime - this.playStartTime);\n        return time * this._playbackRate;\n    }\n    set currentTime(value) {\n        const wasPlaying = !this.paused;\n        wasPlaying && this._pause();\n        this.playedDuration = value / this._playbackRate;\n        wasPlaying && this._play();\n        this.emit('seeking');\n        this.emit('timeupdate');\n    }\n    get duration() {\n        var _a, _b;\n        return (_a = this._duration) !== null && _a !== void 0 ? _a : (((_b = this.buffer) === null || _b === void 0 ? void 0 : _b.duration) || 0);\n    }\n    set duration(value) {\n        this._duration = value;\n    }\n    get volume() {\n        return this.gainNode.gain.value;\n    }\n    set volume(value) {\n        this.gainNode.gain.value = value;\n        this.emit('volumechange');\n    }\n    get muted() {\n        return this._muted;\n    }\n    set muted(value) {\n        if (this._muted === value)\n            return;\n        this._muted = value;\n        if (this._muted) {\n            this.gainNode.disconnect();\n        }\n        else {\n            this.gainNode.connect(this.audioContext.destination);\n        }\n    }\n    canPlayType(mimeType) {\n        return /^(audio|video)\\//.test(mimeType);\n    }\n    /** Get the GainNode used to play the audio. Can be used to attach filters. */\n    getGainNode() {\n        return this.gainNode;\n    }\n    /** Get decoded audio */\n    getChannelData() {\n        const channels = [];\n        if (!this.buffer)\n            return channels;\n        const numChannels = this.buffer.numberOfChannels;\n        for (let i = 0; i < numChannels; i++) {\n            channels.push(this.buffer.getChannelData(i));\n        }\n        return channels;\n    }\n}\nexport default WebAudioPlayer;\n","import WaveSurfer from 'wavesurfer.js';\r\nimport RecordPlugin from 'wavesurfer.js/dist/plugins/record.esm.js';\r\nwindow.WaveSurfer = WaveSurfer;\r\nwindow.RecordPlugin = RecordPlugin;"],"sourceRoot":""}